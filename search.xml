<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Typora</title>
      <link href="/2023/07/04/markdown-bian-ji-qi/"/>
      <url>/2023/07/04/markdown-bian-ji-qi/</url>
      
        <content type="html"><![CDATA[<h2 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a><a href="https://www.typora.net/">Typora</a></h2><h5 id="一种Markdown编辑器（需要激活）"><a href="#一种Markdown编辑器（需要激活）" class="headerlink" title="一种Markdown编辑器（需要激活）"></a>一种Markdown编辑器（需要激活）</h5><ol><li><p>打开安装的路径 </p><p><img src="/2023/07/04/markdown-bian-ji-qi/image-202307041.png"></p></li><li><p>在搜索框中搜索 LicenseIndex </p><p><img src="/2023/07/04/markdown-bian-ji-qi/image-202307042.png"></p></li><li><p>打开 LisenseIndex.chunk.js</p><p><img src="/2023/07/04/markdown-bian-ji-qi/image-202307043.png"></p></li><li><p>在文件中查找e.hasActivated=”true”=e.hasActivated</p><p><img src="/2023/07/04/markdown-bian-ji-qi/image-202307044.png"></p></li><li><p>修改为e.hasActivated=”true”==”true”</p><p><img src="/2023/07/04/markdown-bian-ji-qi/image-202307045.png"></p></li><li><p>重新打开Typora，就会显示已激活！</p><p><img src="/2023/07/04/markdown-bian-ji-qi/image-202307046.png"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欧式筛</title>
      <link href="/2023/05/07/ou-shi-shai/"/>
      <url>/2023/05/07/ou-shi-shai/</url>
      
        <content type="html"><![CDATA[<h2 id="欧式筛"><a href="#欧式筛" class="headerlink" title="欧式筛"></a>欧式筛</h2><h4 id="（又称线性筛法，因为他的复杂度就是线性而不是接近）"><a href="#（又称线性筛法，因为他的复杂度就是线性而不是接近）" class="headerlink" title="（又称线性筛法，因为他的复杂度就是线性而不是接近）"></a>（又称线性筛法，因为他的复杂度就是线性而不是接近）</h4><p>思路就是将所有质数放入一个数组里。i从2到遍历，将i与每个小于i的质数相乘筛去他们的乘积，直到i等于那个质数或那个质数是i的质因子的时候停下，这样子必然满足合数是由最小质因子筛去的（因为每个合数其实都可以看成一个很小的质数和一个数相乘得到）</p><h5 id="复杂度O-n"><a href="#复杂度O-n" class="headerlink" title="复杂度O(n)"></a>复杂度O(n)</h5><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">bool</span> st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> pr<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> id<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    st<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>st<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            pr<span class="token punctuation">[</span><span class="token operator">++</span>id<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>id<span class="token operator">&amp;&amp;</span>i<span class="token operator">*</span>pr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>N<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            st<span class="token punctuation">[</span>i<span class="token operator">*</span>pr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span>pr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 筛质数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>埃氏筛</title>
      <link href="/2023/05/07/ai-shi-shai/"/>
      <url>/2023/05/07/ai-shi-shai/</url>
      
        <content type="html"><![CDATA[<h2 id="埃氏筛"><a href="#埃氏筛" class="headerlink" title="埃氏筛"></a>埃氏筛</h2><p>原理是任意一个整数的倍数都是合数。那么我们扫描每个数，将他所有小于N的倍数标记为合数。这样一直扫描，一旦扫描到的数没有被标记则这个数必然没有其他因子，这个数就为质数。</p><h5 id="复杂度O-nlog-n-log-n"><a href="#复杂度O-nlog-n-log-n" class="headerlink" title="复杂度O(nlog(n)log(n))"></a>复杂度O(nlog(n)log(n))</h5><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">bool</span> st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    st<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">+</span><span class="token operator">=</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>                st<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 筛质数 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
